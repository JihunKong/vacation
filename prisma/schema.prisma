// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 학교 모델
model School {
  id            String    @id @default(cuid())
  neisCode      String    @unique  // 나이스 학교 코드
  name          String              // 학교명
  region        String?             // 지역 (시/도)
  district      String?             // 지역구 (시/군/구)
  address       String?             // 주소
  schoolType    SchoolType          // 학교 유형
  
  // 관계
  users         User[]
  leaderboardEntries LeaderboardEntry[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// 학교 유형
enum SchoolType {
  ELEMENTARY    // 초등학교
  MIDDLE        // 중학교
  HIGH          // 고등학교
  SPECIAL       // 특수학교
  OTHER         // 기타
}

// 사용자 모델
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?   // 비밀번호 (해시)
  name          String?
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // 학교 정보
  schoolId      String?
  school        School?   @relation(fields: [schoolId], references: [id])
  
  // 약관 동의 정보
  termsAcceptedAt    DateTime?  // 서비스 이용약관 동의 시간
  privacyAcceptedAt  DateTime?  // 개인정보처리방침 동의 시간
  
  // 학생 프로필
  studentProfile StudentProfile?
  
  // 교사가 작성한 요약
  teacherSummaries Summary[] @relation("TeacherSummaries")
  
  // 좋아요한 레벨 이미지들
  likedLevelImages LevelImageLike[]
}

// 역할 열거형
enum Role {
  STUDENT
  TEACHER
  ADMIN
}

// 학생 프로필 (아바타 정보 포함)
model StudentProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 기본 정보
  level           Int       @default(1)
  experience      Int       @default(0)
  totalXP         Int       @default(0)
  avatarImageUrl  String?
  
  // 아바타 능력치
  strength        Int       @default(10)  // STR: 힘 (운동)
  intelligence    Int       @default(10)  // INT: 지능 (학습, 독서)
  dexterity       Int       @default(10)  // DEX: 민첩성 (취미)
  charisma        Int       @default(10)  // CHA: 매력 (봉사)
  vitality        Int       @default(10)  // VIT: 활력 (기타)
  
  // 통계
  currentStreak   Int       @default(0)
  longestStreak   Int       @default(0)
  totalDays       Int       @default(0)
  totalMinutes    Int       @default(0)
  xpForNextLevel  Int       @default(100)
  
  // 관계
  plans           Plan[]
  activities      Activity[]
  badges          Badge[]
  userAchievements UserAchievement[]
  summaries       Summary[]
  pomodoroSessions PomodoroSession[]
  
  // 친구 관계
  sentFriendRequests     Friendship[] @relation("FriendshipRequester")
  receivedFriendRequests Friendship[] @relation("FriendshipReceiver")
  
  // 그룹 관계
  createdGroups   StudyGroup[] @relation("CreatedGroups")
  groupMemberships GroupMember[]
  challengeParticipations ChallengeParticipant[]
  studyRoomParticipations StudyRoomParticipant[]
  leaderboardEntries LeaderboardEntry[]
  
  // 레벨 이미지
  levelImages     LevelImage[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// 일일 계획
model Plan {
  id              String    @id @default(cuid())
  studentId       String
  student         StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  date            DateTime  @db.Date
  items           PlanItem[]
  
  isCompleted     Boolean   @default(false)
  completedAt     DateTime?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([studentId, date])
}

// 계획 항목
model PlanItem {
  id              String    @id @default(cuid())
  planId          String
  plan            Plan      @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  title           String
  category        Category
  targetMinutes   Int
  
  isCompleted     Boolean   @default(false)
  actualMinutes   Int?
  
  order           Int
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// 활동 카테고리
enum Category {
  STUDY      // 학습
  EXERCISE   // 운동
  READING    // 독서
  HOBBY      // 취미
  VOLUNTEER  // 봉사
  OTHER      // 기타
}

// 활동 기록
model Activity {
  id              String    @id @default(cuid())
  studentId       String
  student         StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  title           String
  description     String?
  category        Category
  minutes         Int
  
  date            DateTime  @db.Date
  
  // 획득한 경험치와 능력치
  xpEarned        Int
  statPoints      Json      // { strength: 0, intelligence: 0, ... }
  
  // 뽀모도로 세션에서 생성된 경우
  pomodoroSession PomodoroSession?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// 배지/업적
model Badge {
  id              String    @id @default(cuid())
  studentId       String
  student         StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  type            BadgeType
  tier            Int       @default(1) // 1: 브론즈, 2: 실버, 3: 골드
  
  earnedAt        DateTime  @default(now())
}

// 배지 타입
enum BadgeType {
  STUDY_MASTER      // 학습의 달인
  FITNESS_GURU      // 운동의 달인
  BOOKWORM         // 독서왕
  HOBBY_EXPERT     // 취미의 달인
  VOLUNTEER_HERO   // 봉사왕
  STREAK_KEEPER    // 연속 달성
  LEVEL_MILESTONE  // 레벨 달성
}

// 도전과제 정의
model Achievement {
  id              String    @id @default(cuid())
  code            String    @unique // 고유 식별자 (예: "first_activity", "week_warrior")
  title           String
  description     String
  icon            String
  category        AchievementCategory
  difficulty      AchievementDifficulty
  xpReward        Int
  target          Int
  
  // 월별 도전과제 관련
  isMonthly       Boolean   @default(false)
  activeMonth     Int?      // 1-12, null이면 항상 활성
  
  // 통계 추적용
  checkType       String    // "totalActivities", "consecutiveDays", "studyHours" 등
  checkCondition  Json?     // 추가 조건 (예: { category: "STUDY", timeRange: "morning" })
  
  // 사용자별 진행 상황
  userAchievements UserAchievement[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// 사용자별 도전과제 진행 상황
model UserAchievement {
  id              String    @id @default(cuid())
  studentId       String
  student         StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  achievementId   String
  achievement     Achievement @relation(fields: [achievementId], references: [id])
  
  progress        Int       @default(0)
  completed       Boolean   @default(false)
  completedAt     DateTime?
  claimedReward   Boolean   @default(false)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([studentId, achievementId])
  @@index([studentId, completed])
}

// 도전과제 카테고리
enum AchievementCategory {
  STUDY           // 학습 관련
  FITNESS         // 운동 관련
  READING         // 독서 관련
  SOCIAL          // 소셜/친구 관련
  STREAK          // 연속 달성
  LEVEL           // 레벨/경험치
  TIME            // 시간 관련
  SPECIAL         // 특별 도전과제
  MONTHLY         // 월별 테마
}

// 도전과제 난이도
enum AchievementDifficulty {
  EASY            // 쉬움 (브론즈)
  MEDIUM          // 보통 (실버)
  HARD            // 어려움 (골드)
  LEGENDARY       // 전설 (플래티넘)
}

// AI 요약
model Summary {
  id              String    @id @default(cuid())
  studentId       String
  student         StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  teacherId       String
  teacher         User      @relation("TeacherSummaries", fields: [teacherId], references: [id])
  
  period          SummaryPeriod
  startDate       DateTime  @db.Date
  endDate         DateTime  @db.Date
  
  content         String    @db.Text
  aiGenerated     Boolean   @default(true)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// 요약 기간
enum SummaryPeriod {
  WEEKLY
  MONTHLY
  FULL
}

// 뽀모도로 세션
model PomodoroSession {
  id              String    @id @default(cuid())
  studentId       String
  student         StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  category        Category
  title           String?
  
  startTime       DateTime
  endTime         DateTime?
  targetMinutes   Int       @default(25)  // 기본 25분
  actualMinutes   Int?
  
  isBreak         Boolean   @default(false)
  isCompleted     Boolean   @default(false)
  
  // 완료시 자동 생성된 활동
  activityId      String?   @unique
  activity        Activity? @relation(fields: [activityId], references: [id])
  
  // 보너스 XP (연속 완료 등)
  bonusXP         Int       @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// 친구 관계
model Friendship {
  id              String    @id @default(cuid())
  
  requesterId     String
  requester       StudentProfile @relation("FriendshipRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  
  receiverId      String
  receiver        StudentProfile @relation("FriendshipReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  
  status          FriendshipStatus @default(PENDING)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([requesterId, receiverId])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

// 스터디 그룹
model StudyGroup {
  id              String    @id @default(cuid())
  name            String
  description     String?
  imageUrl        String?
  
  creatorId       String
  creator         StudentProfile @relation("CreatedGroups", fields: [creatorId], references: [id], onDelete: Cascade)
  
  maxMembers      Int       @default(8)
  isPublic        Boolean   @default(true)
  
  members         GroupMember[]
  challenges      GroupChallenge[]
  studyRooms      StudyRoom[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// 그룹 멤버
model GroupMember {
  id              String    @id @default(cuid())
  
  groupId         String
  group           StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  studentId       String
  student         StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  role            GroupRole @default(MEMBER)
  joinedAt        DateTime  @default(now())
  
  @@unique([groupId, studentId])
}

enum GroupRole {
  OWNER
  ADMIN
  MEMBER
}

// 그룹 챌린지
model GroupChallenge {
  id              String    @id @default(cuid())
  groupId         String
  group           StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  title           String
  description     String?
  category        Category?
  
  targetMinutes   Int       // 목표 시간 (분)
  targetDate      DateTime  @db.Date
  
  rewardXP        Int       @default(100)
  
  isCompleted     Boolean   @default(false)
  completedAt     DateTime?
  
  participants    ChallengeParticipant[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// 챌린지 참가자
model ChallengeParticipant {
  id              String    @id @default(cuid())
  
  challengeId     String
  challenge       GroupChallenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  
  studentId       String
  student         StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  minutesCompleted Int      @default(0)
  isCompleted     Boolean   @default(false)
  completedAt     DateTime?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([challengeId, studentId])
}

// 가상 스터디룸 (동시 학습)
model StudyRoom {
  id              String    @id @default(cuid())
  groupId         String
  group           StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  name            String
  description     String?
  
  isActive        Boolean   @default(true)
  maxParticipants Int       @default(10)
  
  // 현재 활성 참가자
  participants    StudyRoomParticipant[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// 스터디룸 참가자
model StudyRoomParticipant {
  id              String    @id @default(cuid())
  
  roomId          String
  room            StudyRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  studentId       String
  student         StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  joinedAt        DateTime  @default(now())
  leftAt          DateTime?
  
  // 현재 뽀모도로 세션
  currentSessionId String?
  
  @@unique([roomId, studentId])
}

// 리더보드 엔트리 (Redis와 동기화)
model LeaderboardEntry {
  id              String    @id @default(cuid())
  
  studentId       String
  student         StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  // 학교 정보
  schoolId        String?
  school          School?   @relation(fields: [schoolId], references: [id])
  
  period          LeaderboardPeriod
  category        Category?  // null이면 전체
  
  score           Int
  rank            Int       // 전체 순위
  schoolRank      Int?      // 학교 내 순위
  
  date            DateTime  @db.Date  // 해당 기간의 날짜
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([studentId, period, category, date])
  @@index([period, category, date, rank])
  @@index([schoolId, period, category, date, schoolRank])
}

enum LeaderboardPeriod {
  DAILY
  WEEKLY
  MONTHLY
}

// 레벨업 이미지
model LevelImage {
  id              String    @id @default(cuid())
  studentId       String
  student         StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  level           Int       // 10, 20, 30, 40 등
  imageUrl        String    // 생성된 이미지 URL
  prompt          String    @db.Text // 사용된 프롬프트
  
  // 이미지 생성 시점의 능력치
  strength        Int
  intelligence    Int
  dexterity       Int
  charisma        Int
  vitality        Int
  totalXP         Int
  totalMinutes    Int
  
  isPublic        Boolean   @default(true)  // 갤러리 공개 여부
  likes           Int       @default(0)      // 좋아요 수
  
  likedBy         LevelImageLike[]  // 좋아요한 사용자들
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([studentId, level])
  @@index([level, createdAt])
}

// 레벨 이미지 좋아요
model LevelImageLike {
  id              String    @id @default(cuid())
  
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  levelImageId    String
  levelImage      LevelImage @relation(fields: [levelImageId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime  @default(now())
  
  @@unique([userId, levelImageId])  // 사용자당 이미지당 한 번만 좋아요 가능
}
