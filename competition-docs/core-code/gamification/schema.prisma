generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  name          String?
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  studentProfile StudentProfile?
  teacherSummaries Summary[] @relation("TeacherSummaries")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model StudentProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  level           Int       @default(1)
  experience      Int       @default(0)
  totalXP         Int       @default(0)
  avatarImageUrl  String?
  
  strength        Int       @default(10)
  intelligence    Int       @default(10)
  dexterity       Int       @default(10)
  charisma        Int       @default(10)
  vitality        Int       @default(10)
  
  currentStreak   Int       @default(0)
  longestStreak   Int       @default(0)
  totalDays       Int       @default(0)
  totalMinutes    Int       @default(0)
  xpForNextLevel  Int       @default(100)
  
  plans           Plan[]
  activities      Activity[]
  badges          Badge[]
  summaries       Summary[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Plan {
  id              String    @id @default(cuid())
  studentId       String
  student         StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  date            DateTime  @db.Date
  items           PlanItem[]
  
  isCompleted     Boolean   @default(false)
  completedAt     DateTime?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([studentId, date])
}

model PlanItem {
  id              String    @id @default(cuid())
  planId          String
  plan            Plan      @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  title           String
  category        Category
  targetMinutes   Int
  
  isCompleted     Boolean   @default(false)
  actualMinutes   Int?
  
  order           Int
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum Category {
  STUDY
  EXERCISE
  READING
  HOBBY
  VOLUNTEER
  OTHER
}

model Activity {
  id              String    @id @default(cuid())
  studentId       String
  student         StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  title           String
  description     String?
  category        Category
  minutes         Int
  
  date            DateTime  @db.Date
  
  xpEarned        Int
  statPoints      Json
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Badge {
  id              String    @id @default(cuid())
  studentId       String
  student         StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  type            BadgeType
  tier            Int       @default(1)
  
  earnedAt        DateTime  @default(now())
}

enum BadgeType {
  STUDY_MASTER
  FITNESS_GURU
  BOOKWORM
  HOBBY_EXPERT
  VOLUNTEER_HERO
  STREAK_KEEPER
  LEVEL_MILESTONE
}

model Summary {
  id              String    @id @default(cuid())
  studentId       String
  student         StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  teacherId       String
  teacher         User      @relation("TeacherSummaries", fields: [teacherId], references: [id])
  
  period          SummaryPeriod
  startDate       DateTime  @db.Date
  endDate         DateTime  @db.Date
  
  content         String    @db.Text
  aiGenerated     Boolean   @default(true)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum SummaryPeriod {
  WEEKLY
  MONTHLY
  FULL
}